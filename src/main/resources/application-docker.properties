# Docker-specific configuration
spring.application.name=weather-forecast-service
server.port=8080

# Database configuration for Docker
spring.datasource.url=jdbc:postgresql://db:5432/weatherdb
spring.datasource.username=weather_user
spring.datasource.password=weather_password
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Flyway configuration
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration
spring.flyway.enabled=true

# OpenWeatherMap API configuration
openweathermap.api.key=${OPENWEATHERMAP_API_KEY:6d0423d1839c9e30fab36f5f143cf76c}
openweathermap.api.url=https://api.openweathermap.org/data/2.5
openweathermap.api.units=metric

# Actuator endpoints for health checks
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always
management.health.defaults.enabled=true
management.health.db.enabled=true

# Logging configuration for Docker
logging.level.com.weather.forecast=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=WARN
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Cache configuration
spring.cache.type=caffeine

# Connection pool settings for containerized environment
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000

# JVM optimization for containers
server.tomcat.threads.max=50
server.tomcat.accept-count=10
